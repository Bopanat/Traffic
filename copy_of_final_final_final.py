# -*- coding: utf-8 -*-
"""Copy of Final Final Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cxJ-NqDsSq-RMJDAa84N49OOapBk8n2P

### **Split train 70% / test 30%**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

#Read data
df = pd.read_csv('/content/Road-A.csv')
df

#remove Na
df = df.dropna(subset=['16', '17'], axis=0)

tpi_1600_1700 = df['16'].to_numpy()
tpi_1700_1800 = df['17'].to_numpy()

import numpy as np
from sklearn.model_selection import train_test_split

## ข้อมูล
#tpi_1600_1700 = np.array([
#    0.585778, 0.529397, 0.486217, 0.539534, 0.324536, 0.423162,
#    0.504860, 0.669509, 0.313202, 0.385571, 0.397315, 0.523061,
#    0.125395, 0.530853, 0.523048, 0.534201, 0.439380, 0.476023,
#    0.529871, 0.449240, 0.450066, 0.435791, 0.389944, 0.360856,
#    0.568279, 0.315324, 0.569456
#])
#
#tpi_1700_1800 = np.array([
#    0.548623, 0.479441, 0.517383, 0.479861, 0.366560, 0.596535,
#    0.532606, 0.556263, 0.422723, 0.444348, 0.492472, 0.576971,
#    0.189608, 0.352295, 0.624941, 0.481760, 0.333964, 0.469789,
#    0.415004, 0.507606, 0.397299, 0.385448, 0.398719, 0.368674,
#    0.507446, 0.150665, 0.537611
#])

# index ของข้อมูลทั้งหมด
n = len(tpi_1600_1700)
indices = np.arange(n)

# split 70% train, 30% test โดยใช้ shuffle
train_idx, test_idx = train_test_split(indices, test_size=0.3)

# แยกข้อมูลตาม index
x_train = tpi_1600_1700[train_idx]
y_train = tpi_1700_1800[train_idx]

x_test = tpi_1600_1700[test_idx]
y_test = tpi_1700_1800[test_idx]

# แสดงผลบางส่วนเพื่อดู
print("Train x:", x_train)
print("Train y:", y_train)
print("Test x:", x_test)
print("Test y:", y_test)

"""### **Linear**"""

import numpy as np
from sklearn.linear_model import LinearRegression
# --- Linear Regression Function สำหรับหลาย input ---
def linear_predict_batch(x_train, y_train, x_input_array):
    model = LinearRegression()
    model.fit(x_train.reshape(-1, 1), y_train)
    predictions = model.predict(x_input_array.reshape(-1, 1))
    return predictions

# --- เรียกใช้งาน: ทำนาย y_test จาก x_test ---
y_pred_test = linear_predict_batch(x_train, y_train, x_test)

# --- แสดงผล ---
for i, (x_val, y_true, y_pred) in enumerate(zip(x_test, y_test, y_pred_test), 1):
    print(f"Day {i}:")
    print(f"  Input TPI 16-17 : {x_val:.6f}")
    print(f"  True   TPI 17-18: {y_true:.6f}")
    print(f"  Pred   TPI 17-18: {y_pred:.6f}")
    print()

"""### **Bayesian (Old use H1/H2 > / < 0.48)**"""

# --- Bayesian Prediction แบบ batch ---
def bayesian_predict_batch(x_train, y_train, x_input_array, threshold=0.48, bandwidth=0.12):
    df_train = pd.DataFrame({
        'x': x_train,
        'y': y_train
    })
    df_train['H'] = np.where(df_train['y'] >= threshold, 'H1', 'H2')

    P_H1 = np.mean(df_train['H'] == 'H1')
    P_H2 = np.mean(df_train['H'] == 'H2')

    h1 = df_train[df_train['H'] == 'H1']
    h2 = df_train[df_train['H'] == 'H2']

    x1 = h1['y'].mean()
    x2 = h2['y'].mean()

    predictions = []
    for new_input in x_input_array:
        P_x_given_H1 = np.mean(np.abs(h1['x'] - new_input) <= bandwidth)
        P_x_given_H2 = np.mean(np.abs(h2['x'] - new_input) <= bandwidth)

        numerator_H1 = P_x_given_H1 * P_H1
        numerator_H2 = P_x_given_H2 * P_H2
        evidence = numerator_H1 + numerator_H2

        if evidence > 0:
            post_H1 = numerator_H1 / evidence
            post_H2 = numerator_H2 / evidence
            y_pred = post_H1 * x1 + post_H2 * x2
        else:
            idx = np.argmin(np.abs(x_train - new_input))
            y_pred = y_train[idx]

        predictions.append(y_pred)

    return np.array(predictions)

# --- เรียกใช้งานกับ x_test ที่มีอยู่แล้ว ---
y_pred_bayes = bayesian_predict_batch(x_train, y_train, x_test)

# --- แสดงผลแบบเดียวกับ Linear Regression ---
for i, (x_val, y_true, y_pred) in enumerate(zip(x_test, y_test, y_pred_bayes), 1):
    print(f"Day {i}:")
    print(f"  Input TPI 16-17 : {x_val:.6f}")
    print(f"  True   TPI 17-18: {y_true:.6f}")
    print(f"  Pred   TPI 17-18: {y_pred:.6f}")
    print()

"""Bayesian New"""

import numpy as np
from scipy.stats import norm, gaussian_kde

# ===== INPUT: x_train, y_train, x_test, y_test =====

tau = np.std(x_train - y_train)
v_min = y_train.min() - 0.05
v_max = y_train.max() + 0.05
v_grid = np.linspace(v_min, v_max, 3000)

prior_kde = gaussian_kde(y_train)

def bayesian_kde_predict(x_obs):
    prior_pdf = prior_kde(v_grid)
    likelihood_pdf = norm.pdf(x_obs, loc=v_grid, scale=tau)
    unnormalized = likelihood_pdf * prior_pdf
    posterior_pdf = unnormalized / np.trapezoid(unnormalized, v_grid)
    expected = np.trapezoid(v_grid * posterior_pdf, v_grid)
    return expected

y_pred_bayes_kde = np.array([bayesian_kde_predict(x) for x in x_test])

for i, (x_val, y_true, y_pred) in enumerate(zip(x_test, y_test, y_pred_bayes_kde), 1):
    print(f"Day {i}:")
    print(f"  Input TPI 16-17 : {x_val:.6f}")
    print(f"  True   TPI 17-18: {y_true:.6f}")
    print(f"  Pred   TPI 17-18 (Bayesian w/ KDE): {y_pred:.6f}")
    print()

"""### **กราฟเปรียบเทียบ**"""

from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# === สร้าง DataFrame ===
df_result = pd.DataFrame({
    "Day": np.arange(1, len(y_test) + 1),
    "True_TPI": y_test,
    "Linear_Pred": y_pred_test,
    "Bayes_H1H2_Pred": y_pred_bayes,
    "Bayes_KDE_Pred": y_pred_bayes_kde
})

# === คำนวณ RMSE แบบไม่ใช้ squared=False (รองรับทุกเวอร์ชัน) ===
rmse_linear = np.sqrt(mean_squared_error(df_result["True_TPI"], df_result["Linear_Pred"]))
rmse_bayes = np.sqrt(mean_squared_error(df_result["True_TPI"], df_result["Bayes_H1H2_Pred"]))
rmse_kde = np.sqrt(mean_squared_error(df_result["True_TPI"], df_result["Bayes_KDE_Pred"]))

# === วาดกราฟ ===
plt.figure(figsize=(12, 6))
plt.plot(df_result["Day"], df_result["True_TPI"], marker='o', color='black', label="True TPI", linewidth=2)
plt.plot(df_result["Day"], df_result["Linear_Pred"], marker='s', color='royalblue',
         label=f"Linear Regression (RMSE={rmse_linear:.4f})")
plt.plot(df_result["Day"], df_result["Bayes_H1H2_Pred"], marker='^', color='darkorange',
         label=f"Bayesian H1/H2 (RMSE={rmse_bayes:.4f})")
plt.plot(df_result["Day"], df_result["Bayes_KDE_Pred"], marker='d', color='forestgreen',
         label=f"Bayesian KDE (RMSE={rmse_kde:.4f})")

plt.title("TPI Prediction Comparison\n(True vs Linear vs Bayesian Models)", fontsize=14)
plt.xlabel("Day")
plt.ylabel("TPI at 17:00")
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()
plt.show()